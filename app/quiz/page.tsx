'use client';
import { useForm } from "react-hook-form"; import { zodResolver } from "@hookform/resolvers/zod"; import { z } from "zod"; import { useState } from "react";
const Schema=z.object({ gender:z.enum(["female","male","unisex"]), bodyType:z.enum(["petite","tall","curvy","athletic","average"]), sizes:z.string().optional(), budget:z.enum(["$","$$","$$$"]), colors:z.string().optional(), occasion:z.string(), climate:z.enum(["cold","mild","warm","hot"]), vibe:z.string().optional(), region:z.enum(["EU","US"]), currency:z.enum(["EUR","USD"]) }); type Values=z.infer<typeof Schema>;
export default function QuizPage(){ const [loading,setLoading]=useState(false); const [result,setResult]=useState<any|null>(null); const [error,setError]=useState<string|null>(null);
  const { register, handleSubmit } = useForm<Values>({ resolver:zodResolver(Schema), defaultValues:{ gender:"female", bodyType:"average", sizes:"M", budget:"$$", colors:"black, white, beige", occasion:"work", climate:"mild", vibe:"minimal, elegant", region:"EU", currency:"EUR" } });
  async function onSubmit(values:Values){ setLoading(true); setResult(null);
    const brief={ ...values, sizes: values.sizes? values.sizes.split(',').map(s=>s.trim()):[], colors: values.colors? values.colors.split(',').map(s=>s.trim()):[], occasion: values.occasion.split(',').map(s=>s.trim()), vibe: values.vibe? values.vibe.split(',').map(s=>s.trim()):[] };
    const res=await fetch('/api/ai/generate',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(brief)}).then(r=>r.json());
    if(!res.ok){ setError(res.error||'Error'); setLoading(false); return; } setError(null); setResult(res.data); setLoading(false); }
  return(<div className="max-w-2xl mx-auto"><h1 className="text-3xl font-semibold mb-6">Style Quiz</h1>{error && (<div className='p-3 rounded-lg bg-red-50 text-red-700 mb-4 text-sm'>{error} — <a className='underline' href='/pricing'>View pricing</a></div>)}<form className="grid gap-4" onSubmit={handleSubmit(onSubmit)}>
    <div className="grid grid-cols-2 gap-4"><label className="grid gap-1"><span>Gender</span><select className="border rounded-lg p-2" {...register('gender')}><option value='female'>Female</option><option value='male'>Male</option><option value='unisex'>Unisex</option></select></label><label className="grid gap-1"><span>Body Type</span><select className="border rounded-lg p-2" {...register('bodyType')}><option value='petite'>Petite</option><option value='tall'>Tall</option><option value='curvy'>Curvy</option><option value='athletic'>Athletic</option><option value='average'>Average</option></select></label></div>
    <div className="grid grid-cols-2 gap-4"><label className="grid gap-1"><span>Sizes</span><input className="border rounded-lg p-2" {...register('sizes')} placeholder="S, M, 38" /></label><label className="grid gap-1"><span>Budget</span><select className="border rounded-lg p-2" {...register('budget')}><option value='$'>$</option><option value='$$'>$$</option><option value='$$$'>$$$</option></select></label></div>
    <div className="grid grid-cols-2 gap-4"><label className="grid gap-1"><span>Colors</span><input className="border rounded-lg p-2" {...register('colors')} placeholder="black, white, beige" /></label><label className="grid gap-1"><span>Occasion(s)</span><input className="border rounded-lg p-2" {...register('occasion')} placeholder="work, dinner" /></label></div>
    <div className="grid grid-cols-2 gap-4"><label className="grid gap-1"><span>Climate</span><select className="border rounded-lg p-2" {...register('climate')}><option value='cold'>Cold</option><option value='mild'>Mild</option><option value='warm'>Warm</option><option value='hot'>Hot</option></select></label><label className="grid gap-1"><span>Vibe</span><input className="border rounded-lg p-2" {...register('vibe')} placeholder="minimal, elegant" /></label></div>
    <div className="grid grid-cols-2 gap-4"><label className="grid gap-1"><span>Region</span><select className="border rounded-lg p-2" {...register('region')}><option value='EU'>EU</option><option value='US'>US</option></select></label><label className="grid gap-1"><span>Currency</span><select className="border rounded-lg p-2" {...register('currency')}><option value='EUR'>EUR</option><option value='USD'>USD</option></select></label></div>
    <button className="mt-2 px-5 py-3 rounded-xl bg-brand text-white focus-ring" disabled={loading}>{loading?'Generating...':'Generate Looks'}</button></form>
    {result && (<div className="mt-10 grid gap-6"><h2 className="text-2xl font-semibold">Your Looks</h2><div className="grid md:grid-cols-3 gap-6">{result.outfits?.map((o:any)=>(<div key={o.id} className="bg-white rounded-xl shadow-soft p-4"><div className="flex items-center justify-between mb-2"><h3 className="text-xl font-semibold">{o.label}</h3><button className="text-sm underline" onClick={async()=>{const res=await fetch('/api/export/pdf',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({title:'Lookbook',outfits:result.outfits})}); const blob=await res.blob(); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='lookbook.pdf'; a.click(); URL.revokeObjectURL(url);}}>Export PDF</button></div>
      <ul className="space-y-3">{o.items.map((it:any,idx:number)=>(<li key={idx} className="flex gap-3"><img src={it.product.image} alt={it.product.title} className="w-16 h-16 rounded-lg object-cover"/><div className='text-sm'><div className='font-medium'>{it.product.title}</div><div className='opacity-70'>{it.role} • {it.product.currency} {it.product.price}</div><div className='flex gap-2 mt-1'><a className='underline' target='_blank' href={it.product.url}>View</a><button className='underline' onClick={async()=>{const r=await fetch('/api/affiliates/wrap',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({url:it.product.url,geo:'EU',campaignId:'quiz'})}).then(r=>r.json()); const link=r?.data?.affiliateUrl||it.product.url; await navigator.clipboard.writeText(link); window.open(link,'_blank'); alert('Affiliate link copied!');}}>Shop</button></div></div></div>))}</ul>
      <div className="mt-3"><div className="text-sm font-medium mb-1">Why this works</div><ul className="list-disc pl-6 text-sm space-y-1">{o.why.map((w:string,i:number)=>(<li key={i}>{w}</li>))}</ul></div></div>))}</div>
      <div className='flex items-center gap-3 mt-6'><button className='px-4 py-2 rounded-xl border' onClick={async()=>{ await fetch('/api/mock/save',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({brief:{},outfits:result.outfits})}); alert('Saved to Wardrobe'); }}>Save Looks</button><a className='underline' href='/wardrobe'>Go to Wardrobe</a></div></div>)}
  </div>); }
